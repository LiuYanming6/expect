#!/usr/bin/env python3

'''
Change passwords on the named machines. passmass host1 host2 host3 . . .
Note that login shell prompt on remote machine must end in # or $.

PEXPECT LICENSE

    This license is approved by the OSI and FSF as GPL-compatible.
        http://opensource.org/licenses/isc-license.txt

    Copyright (c) 2012, Noah Spurrier <noah@noah.org>
    PERMISSION TO USE, COPY, MODIFY, AND/OR DISTRIBUTE THIS SOFTWARE FOR ANY
    PURPOSE WITH OR WITHOUT FEE IS HEREBY GRANTED, PROVIDED THAT THE ABOVE
    COPYRIGHT NOTICE AND THIS PERMISSION NOTICE APPEAR IN ALL COPIES.
    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

#!/usr/bin/expect

set file [lindex $argv 0]
set ip [lindex $argv 1]

spawn scp  $file root@$ip:/tmp/
set pass "5up"
expect {
    password: {send "$pass\r"; exp_continue}
}

'''

from __future__ import print_function

from __future__ import absolute_import

import pexpect
import sys, getpass

COMMAND_PROMPT = '[$#] '
TERMINAL_PROMPT = r'Terminal type\?'
TERMINAL_TYPE = 'vt100'

SSH_NEWKEY = r'Are you sure you want to continue connecting \(yes/no\)\?'
def pscp(host, file):
    child = pexpect.spawn('scp %s root@%s:/tmp/'%(file, host))
    i = child.expect([pexpect.TIMEOUT, SSH_NEWKEY, '[Pp]assword: '])
    if i == 0: # Timeout
        print('ERROR!')
        print('SSH could not login. Here is what SSH said:')
        print(child.before, child.after)
        sys.exit (1)
    if i == 1: # SSH does not have the public key. Just accept it.
        child.sendline ('yes')
        child.expect ('[Pp]assword: ')
    child.sendline('5up')
    # Now we are either at the command prompt or
    # the login process is asking for our terminal type.
    i = child.expect (['%s: No such file or directory'%file, file])
    if i == 0:
        print('%s: No such file or directory'%file)
        sys.exit (1)
    if i == 1:
        print(file)
    return child

def main():

    if len(sys.argv) <= 2:
        print("pscp file ip")
        return 1

    cpfile = sys.argv[1]
    host = sys.argv[2]
    child = pscp(host, cpfile)
    if child == None:
        print('Could not login to host:', host)

if __name__ == '__main__':
    main()

